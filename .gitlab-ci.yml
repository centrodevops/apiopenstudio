# GitLab pipelines definition.
#
# @package   ApiOpenStudio
# @license   This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
#            If a copy of the MPL was not distributed with this file,
#            You can obtain one at https://mozilla.org/MPL/2.0/.
# @author    john89 (https://gitlab.com/john89)
# @copyright 2020-2030 ApiOpenStudio
# @link      https://www.apiopenstudio.com

image: php:7.4

#cache:
#  key: "$CI_COMMIT_REF_SLUG"
#  paths:
#    - vendor/
#    - .composer/
#    - composer.lock

variables:
  MYSQL_HOST: "mariadb"
  MYSQL_ROOT_PASSWORD: "apiopenstudio"
  MYSQL_DATABASE: "apiopenstudio"
  MYSQL_USERNAME: "apiopenstudio"
  MYSQL_PASSWORD: "apiopenstudio"

before_script:
  - apt-get update
  - apt-get install -y libzip-dev openssh-client rsync libxslt-dev unzip
  - docker-php-ext-install zip xsl
  - eval $(ssh-agent -s)
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
  - php composer-setup.php
  - php -r "unlink('composer-setup.php');"
  - php composer.phar install

stages:
  - lint
#  - test
  - deploy

##################################
## LINTING
##################################

phpcs:
  stage: lint
  script:
    - echo "Linting the codebase."
    - ./vendor/bin/phpcs --standard=PSR12 includes/ public/*.php

##################################
## TESTS
##################################

#functional_tests:
#  stage: test
#  services:
#    - mariadb:latest
#  script:
#    - apt-get install -y mariadb-client iproute2
#    - docker-php-ext-install mysqli
#    - mysql --version
#    - echo "Setup the DB."
#    - php ./includes/scripts/runner_generate_db.php
#    # Test using Ip address
#    - LOCAL_IP=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
#    - echo Local IP $LOCAL_IP
#    - php -S 0.0.0.0:8080 -t public/ 2> /dev/null &
#    - sed -i "s/localhost/$LOCAL_IP:8080/" tests/api.suite.yml
#    # Backup settings files.
#    - if [ -f ".env" ]; then cp .env .env.bak; fi
#    - if [ -f "settings.yml" ]; then cp settings.yml settings.yml.bak; fi
#    # Copy example settings files.
#    - cp example.env .env
#    - cp example.settings.yml settings.yml
#    - php -S localhost:8085 --docroot public &>/dev/null&
#    - ./vendor/bin/codecept build
#    - ./vendor/bin/codecept run --env ci api
#    # Revert settings files.
#    - if [ -f ".env".bak ]; then cp .env.bak .env; rm .env.bak; fi
#    - if [ -f "settings.yml.bak" ]; then cp settings.yml.bak settings.yml; rm settings.yml.bak; fi

#unit_tests:
#  stage: test

##################################
## WIKI
##################################

wiki_dev:
  stage: deploy
  only:
    - develop
  script:
    - echo "Compile and deploy the wiki to dev."
    - ./vendor/bin/bookdown includes/wiki/bookdown.json
    - ssh-keyscan "$DEV_WIKI_URL" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - rsync -rvI --delete --exclude=".*" "/wiki/" "$DEV_DEPLOYER"@"$DEV_WIKI_URL":"$DEV_WIKI_PATH/"
    - rsync -rvI "$CI_PROJECT_DIR/includes/wiki/images" "$DEV_DEPLOYER"@"$DEV_WIKI_URL":"$DEV_WIKI_PATH/"
    - ssh "$DEV_DEPLOYER"@"$DEV_WIKI_URL" "sudo chown -R $DEV_DEPLOYER:www-data $DEV_WIKI_PATH/*"

wiki_prod:
  stage: deploy
  only:
    - master
  script:
    - echo "Compile and deploy the wiki to prod."
    - ./vendor/bin/bookdown includes/wiki/bookdown.json
    - ssh-keyscan "$PROD_WIKI_URL" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - rsync -rvI --delete --exclude=".*" "/wiki/" "$PROD_DEPLOYER"@"$PROD_WIKI_URL":"$PROD_WIKI_PATH/"
    - rsync -rvI "$CI_PROJECT_DIR/includes/wiki/images" "$PROD_DEPLOYER"@"$PROD_WIKI_URL":"$PROD_WIKI_PATH/"
    - ssh "$PROD_DEPLOYER"@"$PROD_WIKI_URL" "sudo chown -R $PROD_DEPLOYER:www-data $PROD_WIKI_PATH/*"

##################################
## PHPDOC
##################################

phpdoc_dev:
  stage: deploy
  only:
    - develop
  script:
    - echo "Compile and deploy the phpdoc to dev."
    - php -r "copy('https://github.com/phpDocumentor/phpDocumentor/releases/download/v2.9.0/phpDocumentor.phar', 'phpDocumentor.phar');"
    - cp phpDocumentor.phar /usr/local/bin/
    - php /usr/local/bin/phpDocumentor.phar -d "$CI_PROJECT_DIR/" -t "$CI_PROJECT_DIR/public/phpdoc" --ignore vendor/,tests/
    - ssh-keyscan "$DEV_PHPDOC_URL" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - rsync -rvI --delete --exclude=".*" "$CI_PROJECT_DIR/public/phpdoc/" "$DEV_DEPLOYER"@"$DEV_PHPDOC_URL":"$DEV_PHPDOC_PATH/"
    - ssh "$DEV_DEPLOYER"@"$DEV_PHPDOC_URL" "sudo chown -R $DEV_DEPLOYER:www-data $DEV_PHPDOC_PATH/*"

phpdoc_prod:
  stage: deploy
  only:
    - master
  script:
    - echo "Compile and deploy the phpdoc to prod."
    - php -r "copy('https://github.com/phpDocumentor/phpDocumentor/releases/download/v2.9.0/phpDocumentor.phar', 'phpDocumentor.phar');"
    - cp phpDocumentor.phar /usr/local/bin/
    - php /usr/local/bin/phpDocumentor.phar -d "$CI_PROJECT_DIR/" -t "$CI_PROJECT_DIR/public/phpdoc" --ignore vendor/,tests/
    - ssh-keyscan "$PROD_PHPDOC_URL" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - rsync -rvI --delete --exclude=".*" "$CI_PROJECT_DIR/public/phpdoc/" "$PROD_DEPLOYER"@"$PROD_PHPDOC_URL":"$PROD_PHPDOC_PATH/"
    - ssh "$PROD_DEPLOYER"@"$PROD_PHPDOC_URL" "sudo chown -R $PROD_DEPLOYER:www-data $PROD_PHPDOC_PATH/*"
