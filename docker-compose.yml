version: '3.7'

services:

# Reverse Proxy.
  nginx-proxy:
    image: jwilder/nginx-proxy:alpine
    container_name: "${APP_NAME}-proxy"
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - api_network

# NGINX API server.
  api:
    image: nginx:stable
    container_name: "${APP_NAME}-api"
    hostname: "${API_DOMAIN}"
    ports:
      - 80
    volumes:
      - ./docker/nginx/api.conf:/etc/nginx/conf.d/default.conf
      - ${PWD}:/var/www/html
      - ${PWD}/logs/api:/var/log/nginx
    environment:
      - VIRTUAL_HOST=${API_DOMAIN}
    depends_on:
      - php
    networks:
      api_network:
        aliases:
          - ${API_DOMAIN}

# Admin API server.
  admin:
    image: nginx:stable
    container_name: "${APP_NAME}-admin"
    hostname: "${ADMIN_DOMAIN}"
    ports:
      - 80
    volumes:
      - ./docker/nginx/admin.conf:/etc/nginx/conf.d/default.conf
      - ${PWD}:/var/www/html
      - ${PWD}/logs/admin:/var/log/nginx
    environment:
      - VIRTUAL_HOST=${ADMIN_DOMAIN}
    depends_on:
      - php
    networks:
      api_network:
        aliases:
          - ${ADMIN_DOMAIN}

# Uncomment this section if you want to serve the wiki.
  bookdown:
    image: sandrokeil/bookdown
    container_name: "${APP_NAME}-bookdown"
    volumes:
      - ./src/wiki:/app
      - ./public/wiki:/wiki
    command: ["bookdown.json"]
    networks:
      - api_network
  wiki:
    image: nginx:stable
    container_name: "${APP_NAME}-wiki"
    hostname: "${WIKI_DOMAIN}"
    ports:
      - 80
    volumes:
      - ./docker/nginx/wiki.conf:/etc/nginx/conf.d/default.conf
      - ${PWD}/public/wiki:/var/www/html
      - ${PWD}/logs/wiki:/var/log/nginx
    environment:
      - VIRTUAL_HOST=${WIKI_DOMAIN}
    networks:
      api_network:
        aliases:
          - ${WIKI_DOMAIN}

#  Generic PHP container.
  php:
    image: php:fpm-stretch
    container_name: "${APP_NAME}-php"
    build:
      context: ./docker/php
      args:
        - WITH_XDEBUG=true
    env_file:
      .env
    ports:
      - "9000:9000"
    volumes:
      - ./composer:/composer
      - .:/var/www/html
      - ./docker/php/php.conf:/usr/local/etc/php-fpm.d/zzz-phpSettings.conf
      - ${PWD}/logs/php:/var/log
    environment:
      - MYSQL_HOST=db
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    networks:
      - api_network

# Node container to install npm requires and run gulp.
  node:
    image: node:11
    container_name: "${APP_NAME}-node"
    volumes:
      - .:/usr/src/service
    working_dir: /usr/src/service
    command: bash -c "npm install && npm install -g gulp && gulp all"
    networks:
      - api_network

# Install composer requires.
  composer:
    image: composer:latest
    container_name: "${APP_NAME}-composer"
    ports:
      - "9001:9000"
    volumes:
      - .:/app
    command: install
    networks:
      - api_network

# Database container.
  db:
    image: mariadb:latest
    container_name: "${APP_NAME}-db"
    ports:
      - "3306:3306"
    volumes:
      - ./dbdata:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    restart: always
    networks:
      - api_network

networks:
  api_network:
    driver: bridge
