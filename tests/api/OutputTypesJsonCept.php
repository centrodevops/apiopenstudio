<?php

$I = new ApiTester($scenario);

$xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
// phpcs:ignore
$xml .= '<apiOpenStudioWrapper><pronoun>this</pronoun><intransitive_verb>is</intransitive_verb><indefinite_article>an</indefinite_article><noun>array</noun><arr><item1>one</item1><item2>two</item2><item3>three</item3><sub><foo>bar</foo><bar>foo</bar></sub></arr></apiOpenStudioWrapper>';

$html = "<!DOCTYPE html>\n";
// phpcs:ignore
$html .= '<html lang="en-us"><head><meta charset="utf-8" /><title>HTML generated by ApiOpenStudio</title></head><body><dl><dt>pronoun</dt><dd>this</dd><dt>intransitive_verb</dt><dd>is</dd><dt>indefinite_article</dt><dd>an</dd><dt>noun</dt><dd>array</dd><dt>arr</dt><dd><dl><dt>item1</dt><dd>one</dd><dt>item2</dt><dd>two</dd><dt>item3</dt><dd>three</dd><dt>sub</dt><dd><dl><dt>foo</dt><dd>bar</dd><dt>bar</dt><dd>foo</dd></dl></dd></dl></dd></dl></body></html>';

$array = [
    "pronoun" => "this",
    "intransitive_verb" => "is",
    "indefinite_article" => "an",
    "noun" => "array",
    "arr" => [
        "item1" => "one",
        "item2" => "two",
        "item3" => "three",
        "sub" => [
            "foo" => "bar",
            "bar" => "foo",
        ],
    ],
];

// phpcs:ignore
$json = '{"pronoun":"this","intransitive_verb":"is","indefinite_article":"an","noun":"array","arr":{"item1":"one","item2":"two","item3":"three","sub":{"foo":"bar","bar":"foo"}}}';

$I->performLogin(getenv('TESTER_DEVELOPER_NAME'), getenv('TESTER_DEVELOPER_PASS'));
$yamlFilename = 'json.yaml';
$uri = $I->getMyBaseUri() . '/json';
$I->createResourceFromYaml($yamlFilename);

// json - application/json
$I->wantTo('Test a html string with accept: application/json.');
$I->haveHttpHeader('Accept', 'application/json');
$I->sendGet($uri);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => $array,
]);
$I->deleteHeader('Accept');

// xml - application/xml
$I->wantTo('Test a html string with accept: application/xml.');
$I->haveHttpHeader('Accept', 'application/xml');
$I->sendGet($uri);
$I->seeResponseCodeIs(200);
$I->seeResponseIsXml();
$I->seeResponseContains($xml);
$I->deleteHeader('Accept');

// xml - text/xml
$I->wantTo('Test a html string with accept: text/xml.');
$I->haveHttpHeader('Accept', 'text/xml');
$I->sendGet($uri);
$I->seeResponseCodeIs(200);
$I->seeResponseIsXml();
$I->seeResponseContains($xml);
$I->deleteHeader('Accept');

// text = text/plain
$I->wantTo('Test a html string with accept: text/plain.');
$I->haveHttpHeader('Accept', 'text/plain');
$I->sendGet($uri);
$I->seeResponseCodeIs(200);
$I->seeResponseContains($json);
$I->deleteHeader('Accept');

// html = text/html
$I->wantTo('Test a html string with accept: text/html.');
$I->haveHttpHeader('Accept', 'text/html');
$I->sendGet($uri);
$I->seeResponseCodeIs(200);
$I->seeResponseIsXml();
$I->seeResponseContains($html);
$I->deleteHeader('Accept');

$I->haveHttpHeader('Accept', 'application/json');
$I->tearDownTestFromYaml($yamlFilename);
