<?php

$I = new ApiTester($scenario);

$I->comment('Testing with simple indexed array');
$yamlFilename = 'castArraySimpleIndexed.yaml';
$uri = $I->getMyBaseUri() . '/cast/array';

$I->performLogin(getenv('TESTER_DEVELOPER_NAME'), getenv('TESTER_DEVELOPER_PASS'));
$I->createResourceFromYaml($yamlFilename);

$I->wantTo('Test cast simple indexed array to array.');
$I->sendGet($uri, ['data_type' => 'array']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => [
        'this',
        'is',
        'an',
        'array',
        0,
    ],
]);

$I->wantTo('Test cast simple indexed array to boolean.');
$I->sendGet($uri, ['data_type' => 'boolean']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'id' => 'test cast simple indexed array cast',
        'code' => 6,
        'message' => 'Cannot cast array to boolean.'
    ],
]);

$I->wantTo('Test cast simple indexed array to empty.');
$I->sendGet($uri, ['data_type' => 'undefined']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => null,
]);

$I->wantTo('Test cast simple indexed array to float.');
$I->sendGet($uri, ['data_type' => 'float']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'id' => 'test cast simple indexed array cast',
        'code' => 6,
        'message' => 'Cannot cast array to float.'
    ],
]);

$I->wantTo('Test cast simple indexed array to html.');
$I->sendGet($uri, ['data_type' => 'html']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => [
        'html' => [
            ['_lang' => 'en-us'],
            [
                'head' => [
                    [
                        'meta' => [
                            ['_charset' => 'utf-8'],
                        ],
                    ], [
                        'title' => [
                            ['#text' => 'HTML generated by ApiOpenStudio'],
                        ],
                    ],
                ],
            ], [
                'body' => [
                    [
                        "dl" => [
                            [
                                "dt" => [
                                    ["#text" => "0"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "this"],
                                ],
                            ], [
                                "dt" => [
                                    ["#text" => "1"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "is"],
                                ],
                            ], [
                                "dt" => [
                                    ["#text" => "2"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "an"],
                                ],
                            ], [
                                "dt" => [
                                    ["#text" => "3"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "array"],
                                ],
                            ], [
                                "dt" => [
                                    ["#text" => "4"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "0"],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ],
    ],
]);

$I->wantTo('Test cast simple indexed array to image.');
$I->sendGet($uri, ['data_type' => 'image']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'code' => 6,
        'id' => 'test cast simple indexed array cast',
        'message' => 'Cannot cast array to image.',
    ],
]);

$I->wantTo('Test cast simple indexed array to integer.');
$I->sendGet($uri, ['data_type' => 'integer']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'id' => 'test cast simple indexed array cast',
        'code' => 6,
        'message' => 'Cannot cast array to integer.'
    ],
]);

$I->wantTo('Test cast simple indexed array to json.');
$I->sendGet($uri, ['data_type' => 'json']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => [
        'this',
        'is',
        'an',
        'array',
        0,
    ],
]);

$I->wantTo('Test cast simple indexed array to text.');
$I->sendGet($uri, ['data_type' => 'text']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'id' => 'test cast simple indexed array cast',
        'code' => 6,
        'message' => 'Cannot cast array to text.'
    ],
]);

$I->wantTo('Test cast simple indexed array to xml.');
$I->sendGet($uri, ['data_type' => 'xml']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => [
        'apiOpenStudioWrapper' => [
            'this',
            'is',
            'an',
            'array',
            0,
        ],
    ],
]);

$I->tearDownTestFromYaml($yamlFilename);

$I->comment('Testing with complex indexed array');
$yamlFilename = 'castArrayComplexIndexed.yaml';
$uri = $I->getMyBaseUri() . '/cast/array';
$I->createResourceFromYaml($yamlFilename);

$I->wantTo('Test cast complex indexed array to array.');
$I->sendGet($uri, ['data_type' => 'array']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => [
        'this',
        'is',
        'an',
        'array',
        [
            'this',
            'is',
            'a',
            'sub-array',
        ],
    ],
]);

$I->wantTo('Test cast complex indexed array to boolean.');
$I->sendGet($uri, ['data_type' => 'boolean']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'id' => 'test cast complex indexed array cast',
        'code' => 6,
        'message' => 'Cannot cast array to boolean.'
    ],
]);

$I->wantTo('Test cast complex indexed array to empty.');
$I->sendGet($uri, ['data_type' => 'undefined']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => null,
]);

$I->wantTo('Test cast complex indexed array to float.');
$I->sendGet($uri, ['data_type' => 'float']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'id' => 'test cast complex indexed array cast',
        'code' => 6,
        'message' => 'Cannot cast array to float.'
    ],
]);

$I->wantTo('Test cast complex indexed array to html.');
$I->sendGet($uri, ['data_type' => 'html']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => [
        'html' => [
            ['_lang' => 'en-us'],
            [
                'head' => [
                    [
                        'meta' => [
                            ['_charset' => 'utf-8'],
                        ],
                    ], [
                        'title' => [
                            ['#text' => 'HTML generated by ApiOpenStudio'],
                        ],
                    ],
                ],
            ], [
                'body' => [
                    [
                        "dl" => [
                            [
                                "dt" => [
                                    ["#text" => "0"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "this"],
                                ],
                            ], [
                                "dt" => [
                                    ["#text" => "1"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "is"],
                                ],
                            ], [
                                "dt" => [
                                    ["#text" => "2"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "an"],
                                ],
                            ], [
                                "dt" => [
                                    ["#text" => "3"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "array"],
                                ],
                            ], [
                                "dt" => [
                                    ["#text" => "4"],
                                ],
                            ], [
                                "dd" => [
                                    [
                                        "dl" => [
                                            [
                                                "dt" => [
                                                    ["#text" => "0"],
                                                ],
                                            ], [
                                                "dd" => [
                                                    ["#text" => "this"],
                                                ],
                                            ], [
                                                "dt" => [
                                                    ["#text" => "1"],
                                                ],
                                            ], [
                                                "dd" => [
                                                    ["#text" => "is"],
                                                ],
                                            ], [
                                                "dt" => [
                                                    ["#text" => "2"],
                                                ],
                                            ], [
                                                "dd" => [
                                                    ["#text" => "a"],
                                                ],
                                            ], [
                                                "dt" => [
                                                    ["#text" => "3"],
                                                ],
                                            ], [
                                                "dd" => [
                                                    ["#text" => "sub-array"],
                                                ],
                                            ],
                                        ],
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ],
    ],
]);

$I->wantTo('Test cast complex indexed array to image.');
$I->sendGet($uri, ['data_type' => 'image']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'code' => 6,
        'id' => 'test cast complex indexed array cast',
        'message' => 'Cannot cast array to image.',
    ],
]);

$I->wantTo('Test cast complex indexed array to integer.');
$I->sendGet($uri, ['data_type' => 'integer']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'id' => 'test cast complex indexed array cast',
        'code' => 6,
        'message' => 'Cannot cast array to integer.'
    ],
]);

$I->wantTo('Test cast complex indexed array to json.');
$I->sendGet($uri, ['data_type' => 'json']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => [
        'this',
        'is',
        'an',
        'array',
        [
            'this',
            'is',
            'a',
            'sub-array',
        ],
    ],
]);

$I->wantTo('Test cast complex indexed array to text.');
$I->sendGet($uri, ['data_type' => 'text']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'id' => 'test cast complex indexed array cast',
        'code' => 6,
        'message' => 'Cannot cast array to text.'
    ],
]);

$I->wantTo('Test cast complex indexed array to xml.');
$I->sendGet($uri, ['data_type' => 'xml']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => [
        'apiOpenStudioWrapper' => [
            'this',
            'is',
            'an',
            'array',
            [
                'this',
                'is',
                'a',
                'sub-array',
            ],
        ],
    ],
]);

$I->tearDownTestFromYaml($yamlFilename);

$I->comment('Testing with simple associative array');
$yamlFilename = 'castArraySimpleAssociative.yaml';
$uri = $I->getMyBaseUri() . '/cast/array';
$I->createResourceFromYaml($yamlFilename);

$I->wantTo('Test cast simple associative array to array.');
$I->sendGet($uri, ['data_type' => 'array']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => [
        'pronoun' => 'this',
        'intransitive_verb' => 'is',
        'indefinite_article' => 'an',
        'noun' => 'array',
    ],
]);

$I->wantTo('Test cast simple associative array to boolean.');
$I->sendGet($uri, ['data_type' => 'boolean']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'id' => 'test cast simple associative array cast',
        'code' => 6,
        'message' => 'Cannot cast array to boolean.'
    ],
]);

$I->wantTo('Test cast simple associative array to empty.');
$I->sendGet($uri, ['data_type' => 'undefined']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => null,
]);

$I->wantTo('Test cast simple associative array to float.');
$I->sendGet($uri, ['data_type' => 'float']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'id' => 'test cast simple associative array cast',
        'code' => 6,
        'message' => 'Cannot cast array to float.'
    ],
]);

$I->wantTo('Test cast simple associative array to html.');
$I->sendGet($uri, ['data_type' => 'html']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => [
        'html' => [
            ['_lang' => 'en-us'],
            [
                'head' => [
                    [
                        'meta' => [
                            ['_charset' => 'utf-8'],
                        ],
                    ], [
                        'title' => [
                            ['#text' => 'HTML generated by ApiOpenStudio'],
                        ],
                    ],
                ],
            ], [
                'body' => [
                    [
                        "dl" => [
                            [
                                "dt" => [
                                    ["#text" => "pronoun"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "this"],
                                ],
                            ], [
                                "dt" => [
                                    ["#text" => "intransitive_verb"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "is"]
                                ],
                            ], [
                                "dt" => [
                                    ["#text" => "indefinite_article"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "an"],
                                ],
                            ], [
                                "dt" => [
                                    ["#text" => "noun"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "array"],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ],
    ],
]);

$I->wantTo('Test cast simple associative array to image.');
$I->sendGet($uri, ['data_type' => 'image']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'code' => 6,
        'id' => 'test cast simple associative array cast',
        'message' => 'Cannot cast array to image.',
    ],
]);

$I->wantTo('Test cast simple associative array to integer.');
$I->sendGet($uri, ['data_type' => 'integer']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'id' => 'test cast simple associative array cast',
        'code' => 6,
        'message' => 'Cannot cast array to integer.'
    ],
]);

$I->wantTo('Test cast simple associative array to json.');
$I->sendGet($uri, ['data_type' => 'json']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => [
        'pronoun' => 'this',
        'intransitive_verb' => 'is',
        'indefinite_article' => 'an',
        'noun' => 'array',
    ],
]);

$I->wantTo('Test cast simple associative array to text.');
$I->sendGet($uri, ['data_type' => 'text']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'id' => 'test cast simple associative array cast',
        'code' => 6,
        'message' => 'Cannot cast array to text.'
    ],
]);

$I->wantTo('Test cast simple associative array to xml.');
$I->sendGet($uri, ['data_type' => 'xml']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => [
        'apiOpenStudioWrapper' => [
            'pronoun' => 'this',
            'intransitive_verb' => 'is',
            'indefinite_article' => 'an',
            'noun' => 'array',
        ],
    ],
]);

$I->tearDownTestFromYaml($yamlFilename);

$I->comment('Testing with complex associative array');
$yamlFilename = 'castArrayComplexAssociative.yaml';
$uri = $I->getMyBaseUri() . '/cast/array';
$I->createResourceFromYaml($yamlFilename);

$I->wantTo('Test cast complex associative array to array.');
$I->sendGet($uri, ['data_type' => 'array']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => [
        'pronoun' => 'this',
        'intransitive_verb' => 'is',
        'indefinite_article' => 'an',
        'noun' => 'array',
        'arr' => [
            'item1' => 'one',
            'item2' => 'two',
            'item3' => 'three',
            'sub' => [
                'foo' => 'bar',
                'bar' => 'foo',
            ],
        ],
    ],
]);

$I->wantTo('Test cast complex associative array to boolean.');
$I->sendGet($uri, ['data_type' => 'boolean']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'id' => 'test cast complex associative array cast',
        'code' => 6,
        'message' => 'Cannot cast array to boolean.'
    ],
]);

$I->wantTo('Test cast complex associative array to empty.');
$I->sendGet($uri, ['data_type' => 'undefined']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => null,
]);

$I->wantTo('Test cast complex associative array to float.');
$I->sendGet($uri, ['data_type' => 'float']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'id' => 'test cast complex associative array cast',
        'code' => 6,
        'message' => 'Cannot cast array to float.'
    ],
]);

$I->wantTo('Test cast complex associative array to html.');
$I->sendGet($uri, ['data_type' => 'html']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => [
        'html' => [
            ['_lang' => 'en-us'],
            [
                'head' => [
                    [
                        'meta' => [
                            ['_charset' => 'utf-8'],
                        ],
                    ], [
                        'title' => [
                            ['#text' => 'HTML generated by ApiOpenStudio'],
                        ],
                    ],
                ],
            ], [
                'body' => [
                    [
                        "dl" => [
                            [
                                "dt" => [
                                    ["#text" => "pronoun"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "this"],
                                ],
                            ], [
                                "dt" => [
                                    ["#text" => "intransitive_verb"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "is"],
                                ],
                            ], [
                                "dt" => [
                                    ["#text" => "indefinite_article"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "an"],
                                ],
                            ], [
                                "dt" => [
                                    ["#text" => "noun"],
                                ],
                            ], [
                                "dd" => [
                                    ["#text" => "array"],
                                ],
                            ], [
                                "dt" => [
                                    ["#text" => "arr"],
                                ],
                            ], [
                                "dd" => [
                                    [
                                        "dl" => [
                                            [
                                                "dt" => [
                                                    ["#text" => "item1"],
                                                ],
                                            ], [
                                                "dd" => [
                                                    ["#text" => "one"],
                                                ],
                                            ], [
                                                "dt" => [
                                                    ["#text" => "item2"],
                                                ],
                                            ], [
                                                "dd" => [
                                                    ["#text" => "two"],
                                                ],
                                            ], [
                                                "dt" => [
                                                    ["#text" => "item3"],
                                                ],
                                            ], [
                                                "dd" => [
                                                    ["#text" => "three"],
                                                ],
                                            ], [
                                                "dt" => [
                                                    ["#text" => "sub"],
                                                ],
                                            ], [
                                                "dd" => [
                                                    [
                                                        "dl" => [
                                                            [
                                                                "dt" => [
                                                                    ["#text" => "foo"],
                                                                ],
                                                            ], [
                                                                "dd" => [
                                                                    ["#text" => "bar"],
                                                                ],
                                                            ], [
                                                                "dt" => [
                                                                    ["#text" => "bar"],
                                                                ],
                                                            ], [
                                                                "dd" => [
                                                                    ["#text" => "foo"],
                                                                ],
                                                            ],
                                                        ],
                                                    ],
                                                ],
                                            ],
                                        ],
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
        ],
    ],
]);

$I->wantTo('Test cast complex associative array to image.');
$I->sendGet($uri, ['data_type' => 'image']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'code' => 6,
        'id' => 'test cast complex associative array cast',
        'message' => 'Cannot cast array to image.',
    ],
]);

$I->wantTo('Test cast complex associative array to integer.');
$I->sendGet($uri, ['data_type' => 'integer']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'id' => 'test cast complex associative array cast',
        'code' => 6,
        'message' => 'Cannot cast array to integer.'
    ],
]);

$I->wantTo('Test cast complex associative array to json.');
$I->sendGet($uri, ['data_type' => 'json']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => [
        'pronoun' => 'this',
        'intransitive_verb' => 'is',
        'indefinite_article' => 'an',
        'noun' => 'array',
        'arr' => [
            'item1' => 'one',
            'item2' => 'two',
            'item3' => 'three',
            'sub' => [
                'foo' => 'bar',
                'bar' => 'foo',
            ],
        ],
    ],
]);

$I->wantTo('Test cast complex associative array to text.');
$I->sendGet($uri, ['data_type' => 'text']);
$I->seeResponseCodeIs(400);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'error',
    'data' => [
        'id' => 'test cast complex associative array cast',
        'code' => 6,
        'message' => 'Cannot cast array to text.'
    ],
]);

$I->wantTo('Test cast complex associative array to xml.');
$I->sendGet($uri, ['data_type' => 'xml']);
$I->seeResponseCodeIs(200);
$I->seeResponseIsJson();
$I->seeResponseContainsJson([
    'result' => 'ok',
    'data' => [
        'apiOpenStudioWrapper' => [
            'pronoun' => 'this',
            'intransitive_verb' => 'is',
            'indefinite_article' => 'an',
            'noun' => 'array',
            'arr' => [
                'item1' => 'one',
                'item2' => 'two',
                'item3' => 'three',
                'sub' => [
                    'foo' => 'bar',
                    'bar' => 'foo',
                ],
            ],
        ],
    ],
]);

$I->tearDownTestFromYaml($yamlFilename);
