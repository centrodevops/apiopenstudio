<?php

namespace Datagator\Output;

class Html extends Xml
{
  protected $header = 'Content-Type:text/html';
  protected $details = array(
    'name' => 'Html',
    'machineName' => 'html',
    'description' => 'Output in HTML format.',
    'menu' => 'Output',
    'application' => 'Common',
    'input' => array(
      'destination' => array(
        'description' => 'Destination URLs for the output.',
        'cardinality' => array(1, '*'),
        'literalAllowed' => true,
        'limitFunctions' => array(),
        'limitTypes' => array('string'),
        'limitValues' => array(),
        'default' => ''
      ),
      'method' => array(
        'description' => 'HTTP delivery method when sending output. Only used in the output section.',
        'cardinality' => array(0, 1),
        'literalAllowed' => true,
        'limitFunctions' => array(),
        'limitTypes' => array('string'),
        'limitValues' => array('get', 'post'),
        'default' => ''
      ),
      'options' => array(
        'description' => 'Extra Curl options to be applied when sent to the destination  (e.g. cursor: -1, screen_name: foobarapi, skip_status: true, etc).',
        'cardinality' => array(0, '*'),
        'literalAllowed' => true,
        'limitFunctions' => array('field'),
        'limitTypes' => array('string'),
        'limitValues' => array(),
        'default' => ''
      ),
    ),
  );

  /**
   * @param $data
   * @return string
   */
  protected function fromBoolean(& $data)
  {
    $prefix = '<!DOCTYPE html><html><head><meta charset="utf-8"><title>HTML generated by Datagator</title></head><body>';
    $suffix = '</body></html>';
    return $prefix . $data ? 'true' : 'false' . $suffix;
  }

  /**
   * @param $data
   * @return string
   */
  protected function fromInteger(& $data)
  {
    $prefix = '<!DOCTYPE html><html><head><meta charset="utf-8"><title>HTML generated by Datagator</title></head><body>';
    $suffix = '</body></html>';
    return $prefix . $data . $suffix;
  }

  /**
   * @param $data
   * @return string
   */
  protected function fromFloat(& $data)
  {
    $prefix = '<!DOCTYPE html><html><head><meta charset="utf-8"><title>HTML generated by Datagator</title></head><body>';
    $suffix = '</body></html>';
    return $prefix . $data . $suffix;
  }

  /**
   * @param $data
   * @return string
   */
  protected function fromXml(& $data) {
    $prefix = '<!DOCTYPE html><html><head><meta charset="utf-8"><title>HTML generated by Datagator</title></head><body>';
    $suffix = '</body></html>';
    return $prefix . $data . $suffix;
  }

  /**
   * @param $data
   * @return mixed
   */
  protected function fromHtml(& $data) {
    return $data;
  }

  /**
   * @param $data
   * @return mixed
   */
  protected function fromText(& $data) {
    $prefix = '<!DOCTYPE html><html><head><meta charset="utf-8"><title>HTML generated by Datagator</title></head><body>';
    $suffix = '</body></html>';
    return $prefix . $data . $suffix;
  }

  /**
   * @param $data
   * @return mixed
   */
  protected function fromArray(& $data) {
    $prefix = '<!DOCTYPE html><html><head><meta charset="utf-8"><title>HTML generated by Datagator</title></head><body>';
    $suffix = '</body></html>';
    return $prefix . $this->_array2dl($data) . $suffix;
  }

  /**
   * @param $data
   * @return mixed
   */
  protected function fromJson(& $data) {
    $prefix = '<!DOCTYPE html><html><head><meta charset="utf-8"><title>HTML generated by Datagator</title></head><body>';
    $suffix = '</body></html>';
    return $prefix . $data . $suffix;
  }

  private function _array2dl(& $arr)
  {
    $result = '<dl>';
    foreach($arr as $key => $val) {
      $result .= "<dt>$key</dt>";
      if(is_array($val)) {
        $result .= '<dd>' . $this->_array2dl($val) . '</dd>';
      } else {
        $result .= "<dd>$val</dd>";
      }
    }
    return "$result</dl>";
  }

  protected function fromImage(& $data) {
    $prefix = '<!DOCTYPE html><html><head><meta charset="utf-8"><title>HTML generated by Datagator</title></head><body>';
    $suffix = '</body></html>';
    return $prefix . $data . $suffix;
  }
}