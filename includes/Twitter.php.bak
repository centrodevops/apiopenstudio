<?php

/**
 * Class Twitter.
 *
 * @package    ApiOpenStudio
 * @subpackage Endpoint
 * @author     john89 (https://gitlab.com/john89)
 * @copyright  2020-2030 Naala Pty Ltd
 * @license    This Source Code Form is subject to the terms of the ApiOpenStudio Public License.
 *             If a copy of the license was not distributed with this file,
 *             You can obtain one at https://www.apiopenstudio.com/license/.
 * @link       https://www.apiopenstudio.com
 */
//
///**
// * Get data form the Facebook API.
// */
//
//namespace ApiOpenStudio\Endpoint;
//use ApiOpenStudio\Db\ExternalUserMapper;
//use ApiOpenStudio\Processor;
//use ApiOpenStudio\Core;
//
//class Twitter extends Core\ProcessorEntity
//{
//  private $apiUrl = 'https://api.twitter.com/';
//  private $externalEntity = 'twitter';
//  private $db;
//  /**
//   * {@inheritDoc}
//   */
//  protected $details = array(
//    'name' => 'Twitter',
//    'machineName' => 'twitter',
//    'description' => 'Fetch results from the Twitter API.',
//    'account' => 'Apiopenstudio',
//    'menu' => 'Endpoint',
//    'input' => array(
//      'key' => array(
//        'description' => 'The consumer key to attach with.',
//        'cardinality' => array(1, 1),
//        'literalAllowed' => false,
//        'limitProcessors' => array(),
//        'limitTypes' => array('string'),
//        'limitValues' => array(),
//        'default' => ''
//      ),
//      'secret' => array(
//        'description' => 'The consumer secret to attach with.',
//        'cardinality' => array(1, 1),
//        'literalAllowed' => false,
//        'limitProcessors' => array(),
//        'limitTypes' => array('string'),
//        'limitValues' => array(),
//        'default' => ''
//      ),
//      'twitterId' => array(
//        'description' => 'The ID of the twitter account used for authentication - use this if an application has more than one twitter account that it uses (if omitted it will default to "twitter").',
//        'cardinality' => array(0, 1),
//        'literalAllowed' => false,
//        'limitProcessors' => array(),
//        'limitTypes' => array('string'),
//        'limitValues' => array(),
//        'default' => ''
//      ),
//      'method' => array(
//        'description' => 'The API call method (get or past).',
//        'cardinality' => array(1, 1),
//        'literalAllowed' => false,
//        'limitProcessors' => array(),
//        'limitTypes' => array('string'),
//        'limitValues' => array('get', 'post'),
//        'default' => ''
//      ),
//      'uri' => array(
//        'description' => 'The call you want to make to the Twitter API (e.g. "statuses/user_timeline.json", "friends/list.json", etc).',
//        'cardinality' => array(1, 1),
//        'literalAllowed' => false,
//        'limitProcessors' => array(),
//        'limitTypes' => array('string'),
//        'limitValues' => array(),
//        'default' => ''
//      ),
//      'options' => array(
//        'description' => 'The options (an array of Processor Field) allowed by Twitter for the call (e.g. cursor: -1, screen_name: twitterapi, skip_status: true, etc).',
//        'cardinality' => array(0, '*'),
//        'literalAllowed' => false,
//        'limitProcessors' => array('Field'),
//        'limitTypes' => array('string'),
//        'limitValues' => array(),
//        'default' => ''
//      ),
//    ),
//  );
//
//  /**
//   * {@inheritDoc}
//   */
//  public function process()
//  {
//    Core\Debug::variable($this->meta, 'Endpoint Twitter', 4);
//
//    $key = $this->val('key');
//    $secret = $this->val('secret');
//    $appId = $this->request->appId;
//    $twitterId = $this->val('twitterId');
//    $twitterId = empty($twitterId) ? 'twitter' : $twitterId;
//    $this->db = $this->getDb();
//
//    // get existing token if it exists and if not then fetch a new one
//    $mapper = new ExternalUserMapper($this->db);
//    $externalUser = $mapper->findByAppIdEntityExternalId($appId, 'twitter', $twitterId);
//    $token = empty($externalUser->getDataField1()) ? $this->_getToken($key, $secret, $appId, $twitterId) : $externalUser->getDataField1();
//
//    // make call
//    $method = $this->val('method');
//    if ($method != 'get' && $method != 'post') {
//      throw new Core\ApiException('incorrect method', 6, $this->id);
//    }
//    $uri = $this->val('uri');
//    $url = $this->apiUrl . $uri;
//    $options = $this->val('options');
//    $parameters = array();
//    foreach ($options as $option) {
//      $parameters[] = $option;
//    }
//    $curl = new Core\Curl();
//    $result = $curl->$method($url, array(
//      'CURLOPT_POSTFIELDS' => $parameters
//    ));
//    $normalise = new Core\Normalise($result, $curl->type);
//    $result = $normalise->normalise();
//
//    if ($curl->httpStatus != 200) {
//      throw new Core\ApiException($result, 5, $this->id, $curl->httpStatus);
//    }
//
//    return $result;
//  }
//
//  /**
//   * @param $key
//   * @param $secret
//   * @param $appId
//   * @param $twitterId
//   * @return mixed
//   * @throws \Apiopenstudio\Core\ApiException
//   */
//  private function _getToken($key, $secret, $appId, $twitterId)
//  {
//    // fetch token from twitter
//    $url = $this->apiUrl . 'oauth2/token';
//    $credentials = $this->_getCredentials($key, $secret);
//    $options = array(
//      'CURLOPT_HTTPHEADER' => array(
//        "Authorization: Basic $credentials",
//        'Content-Type: application/x-www-form-urlencoded;charset=UTF-8'
//      ),
//      'CURLOPT_POSTFIELDS' => 'grant_type=client_credentials'
//    );
//    $curl = new Core\Curl();
//    $response = $curl->post($url, $options);
//    $normalise = new Core\Normalise($response, $curl->type);
//    $response = $normalise->normalise();
//    if (empty($response['token_type']) || empty($response['access_token'])) {
//      throw new Core\ApiException($response, 4, $this->id, 403);
//    }
//    $token = $response['access_token'];
//
//    // save token to db
//    $mapper = new ExternalUserMapper($this->db);
//    $externalUser = $mapper->findByAppIdEntityExternalId($appId, $this->externalEntity, $twitterId);
//    if (empty($externalUser->getId())) {
//      $externalUser->setAppId($appId);
//      $externalUser->setExternalId($twitterId);
//      $externalUser->setExternalEntity($this->externalEntity);
//    }
//    $externalUser->setDataField1($token);
//    $mapper->save($externalUser);
//
//    return $token;
//  }
//
//  /**
//   * @param $key
//   * @param $secret
//   * @return string
//   */
//  private function _getCredentials($key, $secret)
//  {
//    return base64_encode(rawurlencode($key) . ':' . rawurlencode($secret));
//  }
//}
