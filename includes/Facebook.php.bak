<?php
/**
 * Class Facebook.
 *
 * @package    Apiopenstudio
 * @subpackage Endpoint
 * @author     john89 (https://gitlab.com/john89)
 * @copyright  2020-2030 Naala Pty Ltd
 * @license    This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 *             If a copy of the MPL was not distributed with this file,
 *             You can obtain one at https://mozilla.org/MPL/2.0/.
 * @link       https://www.apiopenstudio.com
 */

namespace ApiOpenStudio\Endpoint;

use ApiOpenStudio\Core;
use Facebook\Exceptions;

/**
 * Class Facebook
 *
 * Provide access to Facebook Graph.
 */
class Facebook extends Core\ProcessorEntity
{
    /**
     * {@inheritDoc}
     */
    protected $details = [
        'name' => 'Facebook',
        'machineName' => 'facebook',
        'description' => 'Fetch results from facebook Graph API.',
        'menu' => 'Endpoint',
        'input' => [
            'appId' => [
                'description' => 'The app_id that you will be accessing facebook with.',
                'cardinality' => [1, 1],
                'literalAllowed' => true,
                'limitProcessors' => [],
                'limitTypes' => ['text'],
                'limitValues' => [],
                'default' => '',
            ],
            'appSecret' => [
                'description' => 'The app_secret that you will be accessing facebook with.',
                'cardinality' => [1, 1],
                'literalAllowed' => true,
                'limitProcessors' => [],
                'limitTypes' => ['text'],
                'limitValues' => [],
                'default' => '',
            ],
            'graphVersion' => [
                'description' => 'The version of graph to use (do not prefix with "v", e.g. use "2.4").',
                'cardinality' => [1, 1],
                'literalAllowed' => true,
                'limitProcessors' => [],
                'limitTypes' => ['text'],
                'limitValues' => [],
                'default' => '',
            ],
            'node' => [
                'description' => 'The node or edge that you want to fetch or post to facebook.',
                'cardinality' => [1, 1],
                'literalAllowed' => true,
                'limitProcessors' => [],
                'limitTypes' => ['text'],
                'limitValues' => [],
                'default' => '',
            ],
            'fields' => [
                'description' => 'The fields that you want to fetch from the node.',
                'cardinality' => [0, '*'],
                'literalAllowed' => true,
                'limitProcessors' => [],
                'limitTypes' => ['text'],
                'limitValues' => [],
                'default' => '',
            ],
            'data' => [
                'description' => 'An array of the data that you want to send from the node.',
                'cardinality' => [0, '*'],
                'literalAllowed' => true,
                'limitProcessors' => [],
                'limitTypes' => ['text'],
                'limitValues' => [],
                'default' => '',
            ],
            'objectType' => [
                'description' => 'The object type that you want to send from the node, i.e. photos.',
                'cardinality' => [0, '*'],
                'literalAllowed' => true,
                'limitProcessors' => [],
                'limitTypes' => ['text'],
                'limitValues' => [],
                'default' => '',
            ],
        ],
    ];

    /**
     * {@inheritDoc}
     */
    public function process()
    {
        $this->logger->info('Processor: ' . $this->details()['machineName']);

        $appId = $this->val('appId');
        $appSecret = $this->val('appSecret');
        $graphVersion = $this->val('graphVersion');
        $accessToken = $this->_getToken($appId, $appSecret, $graphVersion);
        $method = strtolower($this->val('method'));
        if ($method != 'get' && $method != 'post') {
            throw new Core\ApiException('invalid method', 6, $this->id);
        }

        $fb = new \Facebook\Facebook(array(
        'app_id' => $appId,
        'app_secret' => $appSecret,
        'default_graph_version' => "v$graphVersion",
        ));

        $node = $this->val('node');

        return $this->{"_$method"}($fb, $node, $accessToken);
    }

    /**
     * Generate an FB access token/
     *
     * @param $fb
     * @param bool|TRUE $longLived
     * @return mixed
     * @throws \Apiopenstudio\Core\ApiException
     */
    private function _getToken($fb, $longLived = true)
    {
        $helper = $fb->getRedirectLoginHelper();

        try {
            $accessToken = $helper->getAccessToken();
        } catch (Exceptions\FacebookResponseException $e) {
            // When Graph returns an error
            throw new Core\ApiException('Graph returned an error: ' . $e->getMessage(), 5, $this->id);
        } catch (Exceptions\FacebookSDKException $e) {
            // When validation fails or other local issues
            throw new Core\ApiException('Graph SDK returned an error: ' . $e->getMessage(), 5, $this->id);
        }

        if (!isset($accessToken)) {
            if ($helper->getError()) {
                $message = 'Error: ' . $helper->getError();
                $message .= '. Error Code: ' . $helper->getErrorCode();
                $message .= '. Error Reason: ' . $helper->getErrorReason();
                $message .= '. Error Description: ' . $helper->getErrorDescription();
                throw new Core\ApiException($message, 4, $this->id, 401);
            } else {
                throw new Core\ApiException('Bad request', 5, $this->id, 400);
            }
        }

        $oAuth2Client = $fb->getOAuth2Client();
        if ($longLived && !$accessToken->isLongLived()) {
            try {
                $accessToken = $oAuth2Client->getLongLivedAccessToken($accessToken);
            } catch (\Facebook\Exceptions\FacebookSDKException $e) {
                throw new Core\ApiException('Error getting long-lived access token: '. $e->getMessage(),
                    4, $this->id, 401);
            }
        }

        return $accessToken;
    }

    /**
     * Get data from FB.
     *
     * @param $fb
     * @param $node
     * @param $accessToken
     * @return mixed
     * @throws \Apiopenstudio\Core\ApiException
     */
    private function _get($fb, $node, $accessToken)
    {
        $fields = $this->val('fields');

        try {
            $response = $fb->get("/$node?fields=" . implode(',', $fields), $accessToken);
        } catch (Exceptions\FacebookResponseException $e) {
            throw new Core\ApiException('graph returned an error: ' . $e->getMessage(), 5, $this->id);
        } catch (Exceptions\FacebookSDKException $e) {
            throw new Core\ApiException('facebook SDK returned an error: ' . $e->getMessage(), 5, $this->id);
        }

        return $response->getDecodedBody();
    }

    /**
     * Post data to FB.
     * @param \Facebook\Facebook $fb Facebook module.
     * @param $node
     * @param $accessToken
     * @return mixed
     * @throws \Apiopenstudio\Core\ApiException
     */
    private function _post($fb, $node, $accessToken)
    {
        $objectType = $this->val('objectType');
        $data = $this->val('data');

        try {
//            $response = $fb->get("/$node?fields=" . implode(',', $fields), $accessToken);
        } catch (Exceptions\FacebookResponseException $e) {
            throw new Core\ApiException('graph returned an error: ' . $e->getMessage(), 5, $this->id);
        } catch (Exceptions\FacebookSDKException $e) {
            throw new Core\ApiException('facebook SDK returned an error: ' . $e->getMessage(), 5, $this->id);
        }

        return $response->getDecodedBody();
    }
}
